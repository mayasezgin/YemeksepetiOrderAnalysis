# -*- coding: utf-8 -*-
"""DSA210 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IHuCj4lQLQ5ABzeen-doPrXCuGVjJIL7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# %matplotlib inline

from google.colab import files


uploaded = files.upload()


file_name = list(uploaded.keys())[0]
df = pd.read_csv(file_name)


print(df.head())

from google.colab import files


uploaded = files.upload()

exam_file_name = list(uploaded.keys())[0]
print("File name:", exam_file_name)

with open(exam_file_name, 'r', encoding='utf-8') as file:
    exam_data = file.readlines()


cleaned_exam_dates = []
for date in exam_data:
    clean_date = date.strip().replace('\ufeff', '')
    try:
        parsed_date = pd.to_datetime(clean_date)
        cleaned_exam_dates.append(parsed_date)
    except Exception as e:
        print(f"Error: {clean_date} - {e}")


exam_dates = pd.DataFrame({'ExamDate': cleaned_exam_dates})
print(exam_dates.head())

import matplotlib.pyplot as plt
import seaborn as sns


df['DayType'] = df['Weekday'].apply(lambda x: 'Weekend' if x in ['Saturday', 'Sunday'] else 'Weekday')


day_type_summary = df['DayType'].value_counts()


plt.figure(figsize=(8, 6))
sns.barplot(x=day_type_summary.index, y=day_type_summary.values, palette='coolwarm')
plt.title('Orders: Weekdays vs Weekends', fontsize=16)
plt.xlabel('Day Type', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Mark exam days
df['OrderDate'] = pd.to_datetime(df['Date']).dt.date
exam_dates['ExamDate'] = exam_dates['ExamDate'].dt.date
df['IsExamDay'] = df['OrderDate'].isin(exam_dates['ExamDate'])

# Group by Exam Days
exam_day_summary = df['IsExamDay'].value_counts()

# Plot
plt.figure(figsize=(8, 6))
sns.barplot(x=exam_day_summary.index, y=exam_day_summary.values, palette='coolwarm')
plt.title('Orders on Exam Days vs Other Days', fontsize=16)
plt.xlabel('Exam Day (Yes/No)', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks([0, 1], ['No', 'Yes'])
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Mark post-exam days
df['IsPostExamDay'] = df['OrderDate'].isin((exam_dates['ExamDate'] + pd.Timedelta(days=1)))

# Group by Post-Exam Days
post_exam_summary = df['IsPostExamDay'].value_counts()

# Plot
plt.figure(figsize=(8, 6))
sns.barplot(x=post_exam_summary.index, y=post_exam_summary.values, palette='coolwarm')
plt.title('Orders on Post-Exam Days vs Other Days', fontsize=16)
plt.xlabel('Post-Exam Day (Yes/No)', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks([0, 1], ['No', 'Yes'])
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Group by Weekday
orders_per_day = df['Weekday'].value_counts().reindex(
    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
)

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(x=orders_per_day.index, y=orders_per_day.values, palette='viridis')
plt.title('Order Distribution by Weekday', fontsize=16)
plt.xlabel('Weekday', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Separate orders on exam days and non-exam days
exam_day_orders = df[df['IsExamDay']].groupby('OrderDate').size()
non_exam_day_orders = df[~df['IsExamDay']].groupby('OrderDate').size()

# Plot
plt.figure(figsize=(10, 6))
plt.scatter(exam_day_orders.index, exam_day_orders.values, color='blue', label='Exam Days', alpha=0.7)
plt.scatter(non_exam_day_orders.index, non_exam_day_orders.values, color='orange', label='Non-Exam Days', alpha=0.7)
plt.title('Order Distribution: Exam vs Non-Exam Days', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

# Group orders by date and count
orders_by_date = df.groupby('OrderDate').size().reset_index(name='OrderCount')

# Add a column to indicate whether the date is an exam day
orders_by_date['IsExamDay'] = orders_by_date['OrderDate'].isin(exam_dates['ExamDate'])

# Plot the scatter plot
plt.figure(figsize=(12, 6))
plt.scatter(
    orders_by_date[orders_by_date['IsExamDay']]['OrderDate'],
    orders_by_date[orders_by_date['IsExamDay']]['OrderCount'],
    color='blue', label='Exam Days', alpha=0.7
)
plt.scatter(
    orders_by_date[~orders_by_date['IsExamDay']]['OrderDate'],
    orders_by_date[~orders_by_date['IsExamDay']]['OrderCount'],
    color='orange', label='Non-Exam Days', alpha=0.7
)
plt.title('Order Distribution: Exam vs Non-Exam Days', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

# Add a column to indicate whether the date is a post-exam day
orders_by_date['IsPostExamDay'] = orders_by_date['OrderDate'].isin(
    (exam_dates['ExamDate'] + pd.Timedelta(days=1))
)

# Plot the scatter plot
plt.figure(figsize=(12, 6))
plt.scatter(
    orders_by_date[orders_by_date['IsPostExamDay']]['OrderDate'],
    orders_by_date[orders_by_date['IsPostExamDay']]['OrderCount'],
    color='green', label='Post-Exam Days', alpha=0.7
)
plt.scatter(
    orders_by_date[~orders_by_date['IsPostExamDay']]['OrderDate'],
    orders_by_date[~orders_by_date['IsPostExamDay']]['OrderCount'],
    color='red', label='Other Days', alpha=0.7
)
plt.title('Order Distribution: Post-Exam vs Other Days', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

# Plot histogram of orders by date
plt.figure(figsize=(12, 6))
plt.hist(pd.to_datetime(df['OrderDate']), bins=20, color='blue', edgecolor='black', alpha=0.7)
plt.title('Order Frequency Distribution by Date', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Frequency (Number of Orders)', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Plot histogram for orders by weekday
plt.figure(figsize=(10, 6))
plt.hist(df['Weekday'], bins=7, color='green', edgecolor='black', alpha=0.7)
plt.title('Order Frequency Distribution by Weekday', fontsize=16)
plt.xlabel('Weekday', fontsize=12)
plt.ylabel('Frequency (Number of Orders)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Plot for Weekday vs Weekend
day_type_summary = df['DayType'].value_counts()
plt.figure(figsize=(8, 6))
sns.barplot(x=day_type_summary.index, y=day_type_summary.values, palette='coolwarm')
plt.title('Weekday vs Weekend Order Counts', fontsize=16)
plt.xlabel('Day Type', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Scatter plot oluştur
plt.figure(figsize=(12, 6))

# Tüm siparişlerin scatter plot'u
plt.scatter(
    orders_by_date['OrderDate'],
    orders_by_date['OrderCount'],
    color='orange', label='All Orders', alpha=0.7
)

# Sınav günlerini işaretlemek için scatter plot
plt.scatter(
    exam_dates['ExamDate'],
    [orders_by_date['OrderCount'].max()] * len(exam_dates),  # Sınav günlerini daha iyi göstermek için sabit bir y ekseni değeri
    color='blue', label='Exam Days', alpha=0.9, marker='x', s=100
)

# Başlık ve etiketler
plt.title('Orders and Exam Days Distribution', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

# Gün sayısını kontrol et ve normalize et
weekday_count = len(df[df['DayType'] == 'Weekday']['OrderDate'].unique())
weekend_count = len(df[df['DayType'] == 'Weekend']['OrderDate'].unique())

# Normalize edilmiş günlük sipariş sayıları
normalized_counts = {
    'Weekday': day_type_counts['Weekday'] / weekday_count,
    'Weekend': day_type_counts['Weekend'] / weekend_count
}

# DataFrame'e dönüştür
normalized_df = pd.DataFrame(list(normalized_counts.items()), columns=['DayType', 'AvgOrdersPerDay'])

# Grafiği çiz
plt.figure(figsize=(8, 6))
sns.barplot(x='DayType', y='AvgOrdersPerDay', data=normalized_df, palette=['#FFA500', '#32CD32'])  # Turuncu ve yeşil
plt.title('Average Daily Orders: Weekday vs Weekend', fontsize=16)
plt.xlabel('Day Type', fontsize=12)
plt.ylabel('Average Orders Per Day', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

from scipy.stats import ttest_ind

weekday_orders = df[df['DayType'] == 'Weekday'].groupby('OrderDate').size()
weekend_orders = df[df['DayType'] == 'Weekend'].groupby('OrderDate').size()

t_stat, p_value = ttest_ind(weekday_orders, weekend_orders, equal_var=False)


print(f"T-Statistic: {t_stat:.2f}, P-Value: {p_value:.5f}")
if p_value < 0.05:
    print("Reject the null hypothesis: There is a significant difference between Weekday and Weekend orders.")
else:
    print("Fail to reject the null hypothesis: No significant difference between Weekday and Weekend orders.")